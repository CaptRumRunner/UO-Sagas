--[[ 
--------------------------------------------------------------------
Stat Trainer Assistant Script
--------------------------------------------------------------------
Version History:
v0.1.0 - Initial release
--------------------------------------------------------------------
Script created by: 
  ___   _   _   __  __     ___   _   _   _   _   _   _   ____   ___ 
 | _ \ | | | | |  \/  |   | _ \ | | | | | \ | | | \ | | |  __| | _ \
 |   / | |_| | | |\/| |   |   / | |_| | |  \| | |  \| | |  _|  |   /
 |_|_\  \___/  |_|  |_|   |_|_\  \___/  |_|\__| |_|\__| |____| |_|_\

--------------------------------------------------------------------
This script is designed to be used within the UO Sagas environment.
--------------------------------------------------------------------
Script Description: 

This script will raise all 3 stats until it reaches your set goal!
--------------------------------------------------------------------
Script Notes:
1) Train only one stat at a time. If multiple stats are set to `true`, the script will exit.
2) Skills used:
   - Dexterity: Hiding
   - Intelligence: Evaluating Intelligence
   - Strength: Arms Lore
3) To start:
   - Set the desired stat to `true` in the Config section.
   - Update the `Goal` value to your target stat level.
4) If you dont want that skill, keep it locked so it doesnt gain. 
Even if that skill is 0.0 and locked, the stat will still rise.
5) Once the stat is complete:
   - Edit the script to train the next stat.
   - Save and restart the script.
--------------------------------------------------------------------
]]

-- Define Color Scheme
local Colors = {
    Alert   = 33,       -- Red
    Warning = 48,       -- Orange
    Caution = 53,       -- Yellow
    Action  = 67,       -- Green
    Confirm = 73,       -- Light Green
    Info    = 84,       -- Light Blue
    Status  = 93        -- Blue
}

-- Print Initial Start-Up Greeting
Messages.Print("_________________________________________", Colors.Info)
Messages.Print("Welcome to a Rum Runner Assistant Script!", Colors.Info)
Messages.Print("Booting up... Initializing systems... ", Colors.Info)
Messages.Print("________________________________________", Colors.Info)

-- User Settings (Feel free to edit this section as needed)
local Config = {
    Dex = true,       -- Type "True" to raise otherwise type "False"
    Int = false,      -- Only one train one stat at a time or script will end
    Str = false,      -- 
    Goal = 80         -- Update this so your target stat is reached and script will end 
}

------------- Main script is below, do not make changes below this line -------------

-- Function to check configuration validity
local function ValidateConfig()
    local trueCount = 0
    if Config.Dex then trueCount = trueCount + 1 end
    if Config.Int then trueCount = trueCount + 1 end
    if Config.Str then trueCount = trueCount + 1 end

    if trueCount ~= 1 then
        Messages.Overhead("Error: Only one stat can be raised at a time!", Colors.Alert, Player.Serial)
        return false
    end

    return true
end

-- Raise Dexiterity
local function RaiseDex()
    Skills.Use('Hiding')
    Pause(10000)
end

-- Raise Intelligence
local function RaiseInt()
    Skills.Use('Evaluating Intelligence')
    if Targeting.WaitForTarget(1000) then
        Targeting.TargetSelf()
    end
    Pause(1000)
end

-- Raise Strength
local function RaiseStr()
    -- Function to find valid items (weapons/armor) in the backpack
    local function GetValidItems()
        -- Create a filter to find items strictly inside the player's backpack
        local items = Items.FindByFilter({ RootContainer = Player.Backpack.Serial })
        local validItems = {}

        -- Check if no items were found in the backpack
        if not items or #items == 0 then
            Messages.Overhead("No items found in backpack!", Colors.Alert, Player.Serial)
            return validItems
        end

        -- Iterate through each item in the backpack
        for _, item in ipairs(items) do
            -- Log details of the item being checked
            Messages.Overhead(
                "Checking item: Serial = " .. item.Serial ..
                ", Name = " .. (item.Name or "Unknown") ..
                ", Graphic = 0x" .. string.format("%04X", item.Graphic) ..
                ", Properties = " .. (item.Properties or "None"),
                Colors.Info, Player.Serial
            )

            -- Check if the item's properties indicate it's a weapon or armor
            local properties = item.Properties or ""
            if properties:match("weapon") or properties:match("armor") then
                -- Log selected valid item
                Messages.Overhead(
                    "Selected item: Serial = " .. item.Serial ..
                    ", Name = " .. (item.Name or "Unknown") ..
                    ", Graphic = 0x" .. string.format("%04X", item.Graphic),
                    Colors.Action, Player.Serial
                )
                table.insert(validItems, item)
            else
                -- Log why the item was excluded
                Messages.Overhead(
                    "Excluded item: Properties = " .. properties ..
                    ", Serial = " .. tostring(item.Serial),
                    Colors.Warning, Player.Serial
                )
            end
        end

        -- Log if no valid items were found after filtering
        if #validItems == 0 then
            Messages.Overhead("No valid weapons or armor found in backpack!", Colors.Alert, Player.Serial)
        end

        return validItems
    end

    -- Get valid items from the backpack
    local validItems = GetValidItems()

    -- If no valid items are found, exit the function
    if #validItems == 0 then
        return
    end

    -- Use Arms Lore on the first valid item found
    local targetItem = validItems[1]
    Messages.Overhead("Using Arms Lore on: " .. (targetItem.Name or "Unknown"), Colors.Action, Player.Serial)
    Skills.Use('Arms Lore')
    if Targeting.WaitForTarget(1000) then
        Targeting.Target(targetItem.Serial)
    end
    Pause(1000)
end

-- Error Checking
if not ValidateConfig() then
    return -- Exit script if configuration is invalid
end

-- Main Loop
while true do
    if Config.Dex then
        Messages.Print("Training Dexterity...", Colors.Action)
        while Player.Dexterity < Config.Goal do
            RaiseDex()
        end
        Messages.Print("Dexterity training complete!", Colors.Confirm)
        break
    elseif Config.Int then
        Messages.Print("Training Intelligence...", Colors.Action)
        while Player.Intelligence < Config.Goal do
            RaiseInt()
        end
        Messages.Print("Intelligence training complete!", Colors.Confirm)
        break
    elseif Config.Str then
        Messages.Print("Training Strength...", Colors.Action)
        while Player.Strength < Config.Goal do
            RaiseStr()
        end
        Messages.Print("Strength training complete!", Colors.Confirm)
        break
    end

    Pause(150)
end
